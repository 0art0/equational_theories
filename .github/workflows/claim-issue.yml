name: Assign Issue on Claim

on:
  issue_comment:
    types: [created]

jobs:
  claim_issue:
    runs-on: ubuntu-latest

    steps:
    - name: Check if this is an issue, not a pull request
      id: check_issue
      run: |
        if [[ -n "${{ github.event.issue.pull_request }}" ]]; then
          echo "This is a pull request, not an issue."
          exit 0
        fi

    - name: Check if the comment contains exactly "claim"
      id: check_claim
      run: |
        if [[ "${{ github.event.comment.body }}" =~ ^claim$ ]]; then
          echo "exact_claim=true" >> $GITHUB_ENV
        else
          echo "exact_claim=false" >> $GITHUB_ENV
        fi

    - name: Check if issue is already assigned
      if: env.exact_claim == 'true'
      id: check_assignee
      run: |
        ASSIGNEES_COUNT=$(echo "${{ toJson(github.event.issue.assignees) }}" | jq length)
        if [ "$ASSIGNEES_COUNT" -gt 0 ]; then
          echo "Issue is already assigned."
          exit 0
        fi

    - name: Assign the issue to the commenter
      if: env.exact_claim == 'true'
      run: |
        curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        -d '{"assignees":["${{ github.event.comment.user.login }}"]}' \
        https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}

    - name: Log the assignment result
      if: env.exact_claim == 'true'
      run: echo "Issue successfully assigned to ${{ github.event.comment.user.login }}."

    - name: Retrieve the "Claimed Tasks" option ID
      if: env.exact_claim == 'true'
      id: find_claimed_tasks_id
      run: |
        QUERY=$(cat <<EOF
        {
          "query": "{ node(id: \\"PROJECT_ID\\") { ... on ProjectV2 { fields(first: 10) { nodes { ... on ProjectV2SingleSelectField { name options { id name } } } } } } }"
        }
        EOF
        )
        echo "Sending query: $QUERY"

        RESPONSE=$(curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/json" \
          --data "$QUERY" https://api.github.com/graphql)

        echo "GraphQL Response: $RESPONSE"
        CLAIMED_TASKS_ID=$(echo "$RESPONSE" | jq -r '.data.node.fields.nodes[] | select(.name == "Status") | .options[] | select(.name == "Claimed Tasks").id')

        if [ -z "$CLAIMED_TASKS_ID" ]; then
          echo "Error: Could not retrieve 'Claimed Tasks' ID"
          exit 1
        else
          echo "CLAIMED_TASKS_ID=$CLAIMED_TASKS_ID" >> $GITHUB_ENV
        fi
    - name: Move task to "Claimed Tasks" column
      if: env.exact_claim == 'true'
      run: |
        QUERY=$(cat <<EOF
        {
          "query": "mutation { updateProjectV2ItemFieldValue(input: { projectId: \\"PROJECT_ID\\", itemId: \\"ITEM_ID\\", fieldId: \\"FIELD_ID\\", value: { singleSelectOptionId: \\"$CLAIMED_TASKS_ID\\" } }) { projectV2Item { id } } }"
        }
        EOF
        )
        curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
        -H "Content-Type: application/json" \
        --data "$QUERY" \
        https://api.github.com/graphql

    - name: Log the project card movement result
      if: env.exact_claim == 'true'
      run: echo "Task successfully moved to 'Claimed Tasks' column."

    - name: Log when no exact match is found
      if: env.exact_claim == 'false'
      run: echo "The comment does not contain exactly the word 'claim'."
